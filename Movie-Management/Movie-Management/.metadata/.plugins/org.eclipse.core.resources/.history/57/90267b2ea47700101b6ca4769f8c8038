package com.wipro.mohan.controller;

import com.wipro.mohan.entities.Theatre;
import com.wipro.mohan.service.TheatreService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/theatres")
@RequiredArgsConstructor
public class TheatreController {

    private final TheatreService service;
    
    @CircuitBreaker(name = "theatreServiceCircuitBreaker", fallbackMethod = "addTheatreFallBack")
    @PostMapping("/create")
    public Theatre addTheatre(@RequestBody Theatre theatre) {
        return service.addTheatre(theatre); // Create theatre with random movie IDs
    }

    // Fallback method for addTheatre if Movie Service fails
    public Theatre addTheatreFallBack(Theatre theatre, Throwable throwable) {
        // Log the error (you can enhance this with more meaningful messages)
        System.err.println("Error occurred while adding theatre: " + throwable.getMessage());
        
        Theatre fallBackTheatre = new Theatre();
        fallBackTheatre.setTheatreName("Theatre creation failed, please try again later.");
        fallBackTheatre.setCity("Unknown");
        fallBackTheatre.setMovieIds(List.of()); // Empty movie list if Movie Service fails

        return fallBackTheatre;
    }

    @GetMapping("/getTheatres")
    public List<Theatre> getTheatres() {
        return service.getTheatres();
    }

    // returns ONLY movies from the Movie service
    @GetMapping("/{id}/movies")
    public List<Map<String, Object>> getMoviesForTheatre(@PathVariable Long id) {
        return service.getMoviesForTheatre(id);
    }
}